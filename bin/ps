#!/usr/bin/env perl
package App::ps;
use strict;
use warnings;

# This application will reformat the output from "ps" if the "f"
# option is supplied. "f" on Linux will draw the output as a tree,
# but this is not supported on Mac OSX.
#
# All other "ps" options should work as expected.
#
# Example usage:
# ps f
# ps -af
# ps f -o command

my @ps = reverse map { chomp; $_ } qx{which -a ps};
exec $ps[0] => @ARGV if $^O ne 'darwin' and !$ENV{PS_F_NOT_SUPPORTED};
exec $ps[0] => @ARGV if "@ARGV" !~ /-?f(\s|$)/;
exit ps_to_tree(@ARGV);

sub normalize_argv {
  # Replace "-f" or "f", since it's invalid
  my @argv = map { s/(-*\w*)f(.*)/$1$2/; $_ } @_;

  # Check if we have "o", "-o" or something in the command
  my ($has_o, $has_w) = (-1, -1);
  for my $i (0 .. (@argv - 1)) {
    $has_o = $i if $argv[$i] =~ /^-?o/;
    $has_o = -2 if $i == 0 && $argv[$i] =~ s/^([^o]*)o(\w*)$/$1$2/;

    # $has_w is currently not in use / supported
    $has_w += length $2 if $argv[$i] =~ s/(-*[^w]*)(w+)(.*)/$1$3/g;
  }

  # Add default format or prepend -o with "ppid"
  no warnings qw(qw);
  if ($has_o == -1)    { push @argv, qw(-o pid,ppid,pid,tty,stat,time,command) }
  elsif ($has_o == -2) { splice @argv, 1, 0, qw(-o pid,ppid -o) }
  else                 { splice @argv, $has_o, 0, qw(-o pid,ppid) }

  @argv = grep length, @argv;
  warn "[App::ps] argv = @argv\n" if $ENV{PS_DEBUG};
  return @argv;
}

sub ps_to_tree {
  my @ps_argv = normalize_argv(@_);
  my ($heading, $re, $root_nodes, $node) = ('', undef, undef, {});

  open my $PS, '-|', $ps[0], @ps_argv or die "[App:ps] Could not run $ps[0]: $!";
  while (<$PS>) {
    chomp;
    warn "[App::ps] invalid = $_\n" and next unless s!^\s*(\w+)\s+(\w+)!!;    # pid,ppid,...
    warn "[App::ps] out = $_\n" if $ENV{PS_DEBUG};
    my ($pid, $ppid, $out) = ($1, $2, $_);

    # Parse heading PID, PPID, ...
    unless ($pid =~ /^\d+$/) {
      $heading = $out;
      my @chunks = $out =~ m!(\s*\w+\s+)!g;
      my $len = 0;
      $len += length $chunks[$_] for 0 .. (@chunks - 1);
      $re = qr/^(.{$len})(.*)/;
      next;
    }

    # Create process tree
    $node->{$pid}{out} = [$out =~ $re];
    $node->{$pid}{pid} = $pid;
    push @{$node->{$ppid}{kids}}, $node->{$pid};
    $root_nodes ||= $node->{$ppid}{kids};
  }

  # Print process tree
  printf "%s\n", $heading if length $heading;
  return print_tree($root_nodes || [], 0);
}

sub print_tree {
  my ($nodes, $depth) = @_;

  for my $node (@$nodes) {
    my @out = @{$node->{out} || []};
    unshift @out, '' if @out == 1;
    $out[1] //= '';

    my $indent = $depth ? ' ' x ($depth * 4 - 2) : '';
    $indent .= '\_ ' if $depth;
    print "$out[0]$indent$out[1]\n";
    print_tree($node->{kids}, $depth + 1) if $node->{kids};
  }
}
