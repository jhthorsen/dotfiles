#!/usr/bin/env perl
use strict;
use warnings;
use Data::Dumper;
use Regexp::Common 'balanced';

my $op    = shift @ARGV || '';
my $state = {panes => [], windows => []};
get_panes($state);
get_windows($state);

exit cmd_is($state, $1, $2) if $op =~ /^--is-(first|last)-(x|y)/;

local $Data::Dumper::Sortkeys = 1;
print Dumper $state;

sub cmd_is {
  my ($state, $pos, $xy) = @_;
  my ($active) = grep { $_->{is_active} } @{$state->{panes}};
  my $is = $active->{"${pos}_${xy}"} ? 1 : 0;
  print "$is\n";
  return $is ? 0 : 1;
}

sub get_panes {
  my $state = shift;
  open my $LSP, '-|', qw(tmux list-panes) or die $!;
  while (<$LSP>) {
    push @{$state->{panes}}, {is_active => (/active\W*$/ ? 1 : 0)};
  }
}

sub get_windows {
  my $state = shift;
  local $state->{pane_n} = 0;

  open my $LSW, '-|', qw(tmux list-windows) or die $!;
  while (<$LSW>) {
    my ($n, $cols, $rows, $layout, $active) = /^
      (\d+):\s+              # window number
      [^\[]+                 # Example: "zsh* (3 panes)"
      \[(\d+)x(\d+)\]        # cols x rows
      \W+
      \[layout\s+(\S+)\]     # layout
      \s+\@\d+               # Example: "@3"
      \s*(\S*)               # Maybe "(active)"
    /x or die "Cannot parse 'tmux list-windows' $_";

    next unless $active;

    my ($checksum, $layout_str) = split /,/, $layout, 2;
    local $state->{cols}     = $cols;
    local $state->{rows}     = $rows;
    local $state->{window_n} = $n;
    $state->{windows}[$n] = {
      checksum => $checksum,
      cols     => $cols,
      layout   => $layout_str,
      panes    => parse_layout($state, $layout_str),
      rows     => $rows,
    };
  }
}

sub parse_layout {
  my ($state, $layout_str) = @_;
  my @panes;

  my $pane_re = $RE{balanced}{-parens => '[]{}'};
  while ($layout_str =~ s!^\W*(\d+)x(\d+),(\d+),(\d+)!!) {
    my $pane = {cols => $1, rows => $2, x => $3, y => $4};
    $layout_str =~ s!^,\d+,?!!;    # remove ",$number" when no split

    if ($layout_str =~ s!^($pane_re)!!) {
      $pane->{split} = substr($1, 0, 1) eq '{' ? 'horizontal' : 'vertical';
      $pane->{panes} = parse_layout($state, $1);
    }
    else {
      my $n         = $state->{pane_n} || 0;
      my $pane_data = $state->{panes}[$n];
      $pane->{$_} = $pane_data->{$_} for keys %$pane_data;
      $pane->{first_x} = 1 if $pane->{x} == 0;
      $pane->{first_y} = 1 if $pane->{y} == 0;
      $pane->{last_x}  = 1 if $pane->{x} + $pane->{cols} == $state->{cols};
      $pane->{last_y}  = 1 if $pane->{y} + $pane->{rows} == $state->{rows};

      $state->{panes}[$n] = $pane;
      $state->{pane_n}++;
    }

    push @panes, $pane;
  }

  return \@panes;
}
