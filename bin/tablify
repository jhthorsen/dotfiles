#!/usr/bin/env perl
use Getopt::App -signatures;

sub input_to_rows ($self, $FH) {
  my @before = defined $self->{B} ? ($self->{B}) : ();
  my @after  = defined $self->{A} ? ($self->{A})  : ();

  my ($sep, @rows, @curr);
  while (<$FH>) {
    $sep ||= /\t/ ? qr{\t} : qr{\s+};
    push @curr, grep length, split $sep;
    push @rows, [@before, splice(@curr, 0, $self->{n}), @after] while @curr >= $self->{n};
  }

  push @curr, '' while @curr and @curr < $self->{n};
  push @rows, [@before, @curr, @after] if @curr;

  return \@rows;
}

# From Mojo::Util::tablify()
sub tablify ($self, $rows) {
  my @spec;
  for my $row (@$rows) {
    for my $i (0 .. $#$row) {
      ($row->[$i] //= '') =~ y/\r\n//d;
      my $len = length $row->[$i];
      $spec[$i] = $len if $len >= ($spec[$i] // 0);
    }
  }

  my @fm = (map({"\%-${_}s"} @spec[0 .. $#spec - 1]), '%s');
  return join '', map { sprintf join($self->{S}, @fm[0 .. $#$_]) . "\n", @$_ } @$rows;
}

run(
  'n|columns=s # Number of columns',
  'A|after=s   # String after each row',
  'B|before=s  # String before each row',
  'S|spacer=s  # String between columns',
  'h|help      # This help text',
  sub ($self, $file = undef, @) {
    return print extract_usage if $self->{h};
    $self->{n} ||= 3;
    $self->{S} //= ' ';

    my $FH = \*STDIN;
    open $FH, '<', $file if $file;
    print $self->tablify($self->input_to_rows($FH));
    return 0;
  },
);
