#!/usr/bin/env perl
use v5.10;
use strict;
use warnings;

# Example ~/.gitconfig:
#
# [color "diff"]
#   diff = "#ffbb00"
#   old = "#b15544"
#   new = "#709055"
#   func = "#775500 #191919"
#   frag = "#aa8800 #181818"
#   context = "#998877"
# [diffu]
#   pager = "less -RX -x2 -F +/^---"

# In case "diff HEAD^ --stat" or other fancy options
exec qw(git diff), @ARGV if grep {/^-/} @ARGV;

my $DIFF_COLOR = get_ansi_color("color.diff.diff", "#f3be00", "#111111");
my $FRAG_COLOR = get_ansi_color("color.diff.frag", "#ffbb00", "#111111");
my $NEW_COLOR  = get_ansi_color("color.diff.new",  "#709055", "#111111");
my $OLD_COLOR  = get_ansi_color("color.diff.old",  "#b15544", "#111111");

my $ANSI_RE    = qr/\e\[[a-fA-F0-9;]*[mK]/;
my $ANSI_RESET = "\e[m";
my $UNIFIED_RE = qr/@@\s+-(\d+),(\d+)\s+\+(\d+),(\d+)\s+@@/;

$ENV{COLUMNS} ||= get_terminal_width();

my @diff_cmd
  = (@ARGV == 2 && -e $ARGV[0] && -e $ARGV[1])
  ? qw(git diff --color --no-index --)
  : qw(git diff --color);

my $DIFF = -t STDIN ? undef : \*STDIN;
open $DIFF, "-|", @diff_cmd, @ARGV or die "git diff: $!" unless $DIFF;
open my $PAGER, "|-", split(/\s+/, git_config_get("diffu.pager", $ENV{PAGER} || 'less'))
  or die "pager: $!";

diff_to_pager($DIFF, $PAGER);

sub diff_to_pager {
  my ($DIFF, $PAGER) = @_;
  my %header = (clear => 1);

  while (defined(my $line = readline $DIFF)) {
    chomp $line;
    local $| = 1;
    my $formatting = $line =~ s/($ANSI_RE)// ? $1 : "";
    $line =~ s/\e\[0?m//go;    # Remove $ANSI_RESET

    if ($line =~ /^diff --git/ .. $line =~ /^$UNIFIED_RE/) {
      %header = (op => "changed") if $header{clear};

      # diff --git a/.eslintignore b/.eslintignore
      # new file mode 100644
      # index 000000000..78b3681a4
      # --- /dev/null
      # +++ b/.eslintignore
      # @@ -0,0 +1,5 @@

      @header{qw(from to)} = map { s!^[ab]/!!; $_ } split /\s/, $1, 2 if $line =~ /diff --git (.*)/;
      $header{op}          = "added"   if $line =~ /new file/;
      $header{op}          = "deleted" if $line =~ /deleted/;
      $header{op}          = "renamed" if $line =~ /renamed/;

      next unless $line =~ /^$UNIFIED_RE/;
      print {$PAGER} format_header($header{op}, \%header), "\n";
      print {$PAGER} pad($FRAG_COLOR, $line, '', 1),       "\n";
      $header{clear} = 1;
    }
    elsif ($line =~ /^$UNIFIED_RE/) {
      print {$PAGER} pad($FRAG_COLOR, $line, '', 1), "\n";
    }
    else {
      $line =~ s/^[-+]// if $header{op} eq "added" or $header{op} eq "deleted";
      print {$PAGER} "$formatting$line$ANSI_RESET\n";
    }
  }
}

sub format_header {
  my ($op, $h) = @_;

  return pad($NEW_COLOR,  "--- $h->{from}",          "#added")   if $op eq "added";
  return pad($OLD_COLOR,  "--- $h->{from}",          "#deleted") if $op eq "deleted";
  return pad($DIFF_COLOR, "--- $h->{from} $h->{to}", "#renamed") if $op eq "renamed";
  return pad($DIFF_COLOR, "--- $h->{from}",          "#changed") if $h->{from} eq $h->{to};
  return pad($DIFF_COLOR, "--- $h->{from} $h->{to}", "#diff");
}

sub get_ansi_color {
  my ($config_path, @default) = @_;

  my @colors = (split /\s+/, git_config_get($config_path));
  $colors[0] //= $default[0] if $default[0];
  $colors[1] //= $default[1] if $default[1];

  my @fg_bg_code = qw(38 48);
  for (@colors) {
    my $type = shift @fg_bg_code;
    $_ = length($_) < 6 ? "" : sprintf "\e[%d;2;%d;%d;%dm", $type, map {hex} m!(\w\w)!g;
  }

  return join "", @colors;
}

sub get_terminal_width {
  my $width = qx{tput cols};
  return $width && $width =~ m!(\d+)! ? $1 : 80;
}

sub git_config_get {
  my ($path, $default) = @_;
  my $val = qx{git config --get $path};
  chomp $val;
  return length($val) ? $val : $default // '';
}

sub pad {
  my ($color, $left, $right, $search_replace) = @_;
  my $len = length($search_replace ? "$left$right" =~ s/$ANSI_RE//gr : "$left$right");
  sprintf "%s%s%s%s%s", $color, $left, (" " x ($ENV{COLUMNS} - $len)), $right, $ANSI_RESET;
}
