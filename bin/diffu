#!/usr/bin/env perl
use v5.10;
use strict;
use warnings;

# Example ~/.gitconfig:
#
# [color "diff"]
#   commit = "#ffbb00"
#   diff = "#ffbb00"
#   old = "#b15544"
#   new = "#709055"
#   func = "#775500 #191919"
#   frag = "#aa8800 #181818"
#   context = "#998877"

# Shortcut the translator for some known options
exec qw(git diff), @ARGV if grep {/^--(?:name-\w+|no-patch|s\b|stat)/} @ARGV;

my %COLORS = make_ansi_colors(
  "diff.diff"   => "#ffbb00 #111111",
  "diff.frag"   => "#aa8800 #181818",
  "diff.new"    => "#709055 #111111",
  "diff.old"    => "#b15544 #111111",
  "diff.commit" => "#ffbb00 #000000",
);

my $ANSI_RE    = qr/\e\[[a-fA-F0-9;]*[mK]/;
my $ANSI_RESET = "\e[m";
my $UNIFIED_RE = qr/@@\s+-(\d+)(?:,(\d+))\s+\+(\d+)(?:,(\d+))?\s+@@/;

$ENV{COLUMNS} ||= get_terminal_width();

my @diff_cmd
  = (@ARGV == 2 && -e $ARGV[0] && -e $ARGV[1])
  ? qw(git diff --color --no-index --)
  : qw(git diff --color);

my $DIFF = -t STDIN ? undef : \*STDIN;
open $DIFF, "-|", @diff_cmd, @ARGV or die "git diff: $!" unless $DIFF;
my $pager = $ENV{PAGER} || 'less';
$pager = 'less' if $pager =~ m!\bdiffu\b!;
open my $PAGER, "|-", $pager or die "pager: $!";

diff_to_pager($DIFF, $PAGER);

sub diff_to_pager {
  my ($DIFF, $PAGER) = @_;
  my %patch = (clear => 1, op => '');

  while (defined(my $line = readline $DIFF)) {
    chomp $line;
    local $| = 1 if $ENV{LINE_BUFFERED};
    my $formatting = $line =~ s/($ANSI_RE)// ? $1 : "";
    $line =~ s/\e\[0?m//go;    # Remove $ANSI_RESET

    if ($. == 1 and $line =~ /^(\d+)\t(\d+)\t(\S.*)/) {
      # git diff --numstat
      return numstat_to_pager($DIFF, $PAGER, $line);
    }
    elsif ($line =~ /^diff --git/ .. $line =~ /^$UNIFIED_RE/) {
      %patch = (op => "changed") if $patch{clear};

      # diff --git a/.eslintignore b/.eslintignore
      # new file mode 100644
      # index 000000000..78b3681a4
      # --- /dev/null
      # +++ b/.eslintignore
      # @@ -0,0 +1,5 @@

      @patch{qw(from to)} = map { s!^[ab]/!!; $_ } split /\s/, $1, 2 if $line =~ /diff --git (.*)/;
      $patch{op}          = "added"   if $line =~ /new file/;
      $patch{op}          = "deleted" if $line =~ /deleted?/;
      $patch{op}          = "renamed" if $line =~ /renamed?/;

      next unless $line =~ /^$UNIFIED_RE/;
      say {$PAGER} format_header($patch{op}, \%patch);
      say {$PAGER} pad($COLORS{"diff.frag"}, $line, '', 1);
      $patch{clear} = 1;
    }
    elsif ($line =~ /^commit [a-fA-F0-9]{40}/) {
      $line =~ s/($ANSI_RE)//g;
      say {$PAGER} pad($COLORS{"diff.commit"}, "--- $line", '');
    }
    elsif ($line =~ /^$UNIFIED_RE/) {
      say {$PAGER} pad($COLORS{"diff.frag"}, $line, '', 1);
    }
    else {
      $line =~ s/^[-+]// if $patch{op} eq "added" or $patch{op} eq "deleted";
      say {$PAGER} "$formatting$line$ANSI_RESET";
    }
  }
}

sub format_header {
  my ($op, $i) = @_;

  return pad($COLORS{"diff.new"},  "--- $i->{from}",             "#added")   if $op eq "added";
  return pad($COLORS{"diff.old"},  "--- $i->{from}",             "#deleted") if $op eq "deleted";
  return pad($COLORS{"diff.diff"}, "--- $i->{from} -> $i->{to}", "#renamed") if $op eq "renamed";
  return pad($COLORS{"diff.diff"}, "--- $i->{from}", "#changed") if $i->{from} eq $i->{to};
  return pad($COLORS{"diff.diff"}, "--- $i->{from} -> $i->{to}", "#diff");
}

sub get_terminal_width {
  my $width = qx{tput cols};
  return $width && $width =~ m!(\d+)! ? $1 : 80;
}

sub numstat_to_pager {
  my ($DIFF, $PAGER, $line) = @_;

  while (defined $line) {
    chomp $line;
    local $| = 1 if $ENV{LINE_BUFFERED};
    my $color
      = $line =~ /^0\t0\t/  ? $COLORS{'diff.frag'}
      : $line =~ /^0\t\d/   ? $COLORS{'diff.old'}
      : $line =~ /^\d+\t0/  ? $COLORS{'diff.new'}
      : $line =~ /^\d+\t\d/ ? $COLORS{'diff.diff'}
      :                       $COLORS{'diff.context'};

    printf {$PAGER} sprintf "%s%s%s\n", $color, $line, $ANSI_RESET;
    $line = readline $DIFF;
  }
}

sub make_ansi_colors {
  my %colors = @_;
  open my $GIT, '-|', qw(git config --get-regexp color.*) or die "git: $!";
  while (<$GIT>) {
    my ($key, $val) = /^color\.(\S+)\s+(.+)/ or next;
    my @val = split /\s/, $val;
    $val[1] //= $1 if +($colors{$key} // '') =~ m!\s(#.+)!;    # default background
    $colors{$key} = join ' ', @val;
  }

  for my $key (keys %colors) {
    my @colors     = split /\s+/, $colors{$key};
    my @fg_bg_code = qw(38 48);
    for (@colors) {
      my $type = shift @fg_bg_code;
      $_ = length($_) < 6 ? "" : sprintf "\e[%d;2;%d;%d;%dm", $type, map {hex} m!(\w\w)!g;
    }

    $colors{$key} = join "", @colors;
  }

  return %colors;
}

sub pad {
  my ($color, $left, $right, $search_replace) = @_;
  my $len = length($search_replace ? "$left$right" =~ s/$ANSI_RE//gr : "$left$right");
  $len = $ENV{COLUMNS} - $len;
  $len = 0 if $len < 0;
  sprintf "%s%s%s%s%s", $color, $left, " " x $len, $right, $ANSI_RESET;
}
