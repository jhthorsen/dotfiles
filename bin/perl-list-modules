#!perl
use Applify;
use File::Basename qw(basename dirname);
use Time::Piece;

option str => columns => 'Which columns to show',       'mtime,name,version';
option str => format  => 'table (default), json, yaml', 'table';

sub find_modules {
  my ($self, @inc) = @_;

  my %modules;
  for my $inc (@inc) {
    open my $MYMETA, '-|', find => $inc, -name => 'MYMETA.json' or die "find: $!";
    while (<$MYMETA>) {
      my $path = $_;
      chomp $path;
      my $name = basename dirname $path; # Getopt-Long-Util-0.892
      my $version = $name =~ s!-(\d[^-]+)$!! ? $1 : 0;
      $name =~ s!-!::!g;
      my $mtime = localtime(+(stat $path)[9])->datetime;
      $modules{$name} ||= {path => $path, mtime => $mtime, version => $version};
    }
  }

  return \%modules;
}

sub print_json {
  my ($self, $modules) = @_;
  require JSON::PP;
  print JSON::PP::encode_json($modules), "\n";
}

sub print_table {
  my ($self, $modules) = @_;

  my (@columns, @rows) = (split /\W/, $self->columns);
  for my $name (sort keys %$modules) {
    push @rows, [map { $_ eq 'name' ? $name : $modules->{$name}{$_} } @columns];
  }

  # from Mojo::Util
  my @spec;
  for my $row (@rows) {
    for my $i (0 .. $#$row) {
      ($row->[$i] //= '') =~ y/\r\n//d;
      my $len = length $row->[$i];
      $spec[$i] = $len if $len >= ($spec[$i] // 0);
    }
  }

  my @fm = (map({"\%-${_}s"} @spec[0 .. $#spec - 1]), '%s');
  print join '', map { sprintf join('  ', @fm[0 .. $#$_]) . "\n", @$_ } @rows;
}

sub print_yaml {
  my ($self, $modules) = @_;
  require YAML::XS;
  print YAML::XS::Dump($modules);
}

app {
  my ($self, @inc) = @_;

  my $print_method = sprintf 'print_%s', $self->format;
  die "Invalid --format\n" unless $self->can($print_method);

  my $modules = $self->find_modules(@inc ? @inc : @INC);
  $self->$print_method($modules);
  return 0;
};
