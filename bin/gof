#!/bin/bash
[ -n "$PASSWORD_STORE_CLIP_TIME" ] || PASSWORD_STORE_CLIP_TIME="60";
[ -n "$PASSWORD_STORE_DIR" ] || PASSWORD_STORE_DIR="$HOME/.password-store";
[ -n "$FZF_PREVIEW_COMMAND" ] || export FZF_PREVIEW_COMMAND="bat --color always -l yaml --line-range 2: --style plain";

export FZF_PREVIEW_COMMAND PASSWORD_STORE_DIR PASSWORD_STORE_CLIP_TIME;

if [ -n "$IMPORT_FILE" ] ; then
  echo "\$ EDITOR=$0 pass edit < $IMPORT_FILE";
  [ -z "$1" ] && exit 1;
  cat "$IMPORT_FILE" > "$1";
  exit "$?";
fi

find_password_entries() {
  find -L "$PASSWORD_STORE_DIR" -not -name .git -a -name '*.gpg' 2>/dev/null \
    | sed -e "s:$PASSWORD_STORE_DIR/\{0,1\}::" -e 's/\.gpg//' -e 's/\\/\\\\/g' -e 's/:/\\:/g' \
    | sort;
}

find_password_entry() {
  local opts=("--cycle" "--height=-0" "--highlight-line" "--layout=reverse" "--no-mouse");
  if [ "$1" = "--no-preview" ]; then
    find_password_entries | fzf -q "$found" "${opts[@]}" \
      --border=none --no-scrollbar;
  else
    find_password_entries | fzf -q "$found" "${opts[@]}" \
      --bind=ctrl-j:preview-down,ctrl-k:preview-up \
      --preview-window=down,70% \
      --preview "pass show {} | $FZF_PREVIEW_COMMAND";
  fi
}

sub_command="$1";
shift;

if [ "$sub_command" = "--help" ]; then
  cat <<HERE
  $ gof
  $ gof ls
  $ gof export /path/to/exported/files
  $ gof import /path/to/exported/files
  $ gof loop
HERE
elif [ "$sub_command" = "ls" ]; then
  find_password_entries;
elif [ "$sub_command" = "export" ]; then
  OUTPUT="$2";
  [ -d "$OUTPUT" ] || exec echo "Output directory does not exists";
  for i in $(find_password_entries); do
    mkdir -p "$OUTPUT/$(dirname "$i")";
    echo "pass show $i > $OUTPUT/$i.yaml";
    pass show "$i" > "$OUTPUT/$i.yaml";
  done
elif [ "$sub_command" = "import" ]; then
  export SOURCE_DIR="$2";
  [ -d "$SOURCE_DIR" ] || exec echo "Usage: gof import /path/to/exported/files";
  for f in $(find "$SOURCE_DIR" -type f | grep '\.yaml$'); do
    export EDITOR="$0";
    export IMPORT_FILE="$f";
    name="${IMPORT_FILE%.*}";
    name="$(echo "$name" | sed -e "s,${SOURCE_DIR}/\{0,1\},,")";
    pass edit "$name";
  done
elif [ "$sub_command" = "loop" ]; then
  trap 'kill $(jobs -p)' SIGINT SIGTERM;
  while :; do
    found="$(find_password_entry "$@")";
    [ -z "$found" ] && exit 0;
    pass show -c "$found";
    sleep "$PASSWORD_STORE_CLIP_TIME" &
    wait;
  done
else
  found="$(find_password_entry "$@")";
  [ -n "$found" ] || exit 2;
  pass show -c "$found";
fi
